#INCLUDE <SYS/STAT.H>
#INCLUDE <STDIO.H>
#INCLUDE <UNISTD.H>
#INCLUDE <FCNTL.H>
#INCLUDE <STDLIB.H>
#INCLUDE <SIGNAL.H>
#INCLUDE "PACKET.H"

VOLATILE SIG_ATOMIC_T _CONTINUE = 1;

VOID SET_SIG_HANDLER(INT SIGNUM,VOID(*HANDLER)(INT))
{
	STRUCT SIGACTION SA;
	MEMSET(&SA,0X00,SIZEOF(STRUCT SIGACTION));
	
	SA.SA_HANDLER = HANDLER;
	IF(-1==SIGACTION(SIGNUM,&SA,NULL))
		PRINTF("ERROR WITH SIGNAL : %D",SIGNUM);		
}

VOID SIGINT_HANDLER(INT SIGINT)
{
	PRINTF("SIGINT RECEIVED\N");
	_CONTINUE = 0;
}

VOID USAGE (CHAR* INFO)
{
	PRINTF("%S USAGE:\N",INFO);
	PRINTF("%S FIFO FILTERING_CMD\N",INFO);
}

VOID FILTER_PROCESS()
{
	
}

VOID RUN_READ (INT FIFO,CONST CHAR* FILT_CMD)
{
	INT N;
	PACKET BUFFER;
	CHAR* MSG;
	CHAR* OUTPUT_FILE;
	WHILE(_CONTINUE == 1)
	{
		DO
		{
			IF( (N = READ(FIFO, (VOID*)&BUFFER, PIPE_BUF)) > 0)
			{
				/*
				IF( SPRINTF(OUTPUT_FILE, "%D", BUFFER.HEADER.PID) != 1)
				{		
					PERROR("SPRINTF");
					EXIT(EXIT_FAILURE);
				}
				*/	
				SWITCH(FORK())
				{	
					CASE -1: PERROR("FORK"); EXIT(4);
					CASE 0: FILTER_PROCESS();
						EXIT(0);
					DEFAULT:BREAK;
				}
		
				// PRINTING TO STDOUT FOR NOW..
				PRINTF("PID:--------------------%S",BUFFER.HEADER.PID);
				WRITE(1, BUFFER.MSG, SIZEOF(BUFFER.MSG));
				PRINTF("BYTES READ: %D\N",N);
				SLEEP(1);
			}
			IF(N<0)
			{
				PERROR("READ()");
				EXIT(EXIT_FAILURE);
			}
		}WHILE(N == PIPE_BUF);
	}
}

INT MAIN(INT ARGC, CHAR* ARGV[])
{
	IF(ARGC !=3)
	{
		USAGE(ARGV[0]);
		RETURN 0;
	}
	
	// SET SIGINT HANDLER FOR SHUTDOWN
	SET_SIG_HANDLER(SIGINT, SIGINT_HANDLER);
	
	CONST CHAR* MY_FIFO = ARGV[1];
	CONST CHAR* FILT_CMD = ARGV[2];
	INT FIFO;
	
	PRINTF("UNLINKING THE FIFO...\N");
	(VOID)UNLINK(MY_FIFO);
	
	PRINTF("MKFIFO...\N");
	IF( MKFIFO(MY_FIFO, 0666))
		RETURN 1;
	
	PRINTF("OPENING FIFO FILE \N");
	IF ( (FIFO = OPEN(MY_FIFO, O_RDONLY) ) < 0)
	{
		FPRINTF(STDERR,"ERROR WITH OPENING WR_FIFO\N");
		RETURN 1;
	}
	PRINTF("FIFO OPENED\N");
	RUN_READ(FIFO, FILT_CMD);
	
	CLOSE(FIFO);
	RETURN 0;
}
#INCLUDE <SYS/STAT.H>
#INCLUDE <STDIO.H>
#INCLUDE <UNISTD.H>
#INCLUDE <FCNTL.H>
#INCLUDE <STDLIB.H>
#INCLUDE <SIGNAL.H>
#INCLUDE "PACKET.H"

VOLATILE SIG_ATOMIC_T _CONTINUE = 1;

VOID SET_SIG_HANDLER(INT SIGNUM,VOID(*HANDLER)(INT))
{
	STRUCT SIGACTION SA;
	MEMSET(&SA,0X00,SIZEOF(STRUCT SIGACTION));
	
	SA.SA_HANDLER = HANDLER;
	IF(-1==SIGACTION(SIGNUM,&SA,NULL))
		PRINTF("ERROR WITH SIGNAL : %D",SIGNUM);		
}

VOID SIGINT_HANDLER(INT SIGINT)
{
	PRINTF("SIGINT RECEIVED\N");
	_CONTINUE = 0;
}

VOID USAGE (CHAR* INFO)
{
	PRINTF("%S USAGE:\N",INFO);
	PRINTF("%S FIFO FILTERING_CMD\N",INFO);
}

VOID FILTER_PROCESS()
{
	
}

VOID RUN_READ (INT FIFO,CONST CHAR* FILT_CMD)
{
	INT N;
	PACKET BUFFER;
	CHAR* MSG;
	CHAR* OUTPUT_FILE;
	WHILE(_CONTINUE == 1)
	{
		DO
		{
			IF( (N = READ(FIFO, (VOID*)&BUFFER, PIPE_BUF)) > 0)
			{
				/*
				IF( SPRINTF(OUTPUT_FILE, "%D", BUFFER.HEADER.PID) != 1)
				{		
					PERROR("SPRINTF");
					EXIT(EXIT_FAILURE);
				}
				*/	
				SWITCH(FORK())
				{	
					CASE -1: PERROR("FORK"); EXIT(4);
					CASE 0: FILTER_PROCESS();
						EXIT(0);
					DEFAULT:BREAK;
				}
		
				// PRINTING TO STDOUT FOR NOW..
				PRINTF("PID:--------------------%S",BUFFER.HEADER.PID);
				WRITE(1, BUFFER.MSG, SIZEOF(BUFFER.MSG));
				PRINTF("BYTES READ: %D\N",N);
				SLEEP(1);
			}
			IF(N<0)
			{
				PERROR("READ()");
				EXIT(EXIT_FAILURE);
			}
		}WHILE(N == PIPE_BUF);
	}
}

INT MAIN(INT ARGC, CHAR* ARGV[])
{
	IF(ARGC !=3)
	{
		USAGE(ARGV[0]);
		RETURN 0;
	}
	
	// SET SIGINT HANDLER FOR SHUTDOWN
	SET_SIG_HANDLER(SIGINT, SIGINT_HANDLER);
	
	CONST CHAR* MY_FIFO = ARGV[1];
	CONST CHAR* FILT_CMD = ARGV[2];
	INT FIFO;
	
	PRINTF("UNLINKING THE FIFO...\N");
	(VOID)UNLINK(MY_FIFO);
	
	PRINTF("MKFIFO...\N");
	IF( MKFIFO(MY_FIFO, 0666))
		RETURN 1;
	
	PRINTF("OPENING FIFO FILE \N");
	IF ( (FIFO = OPEN(MY_FIFO, O_RDONLY) ) < 0)
	{
		FPRINTF(STDERR,"ERROR WITH OPENING WR_FIFO\N");
		RETURN 1;
	}
	PRINTF("FIFO OPENED\N");
	RUN_READ(FIFO, FILT_CMD);
	
	CLOSE(FIFO);
	RETURN 0;
}
#INCLUDE <SYS/STAT.H>
#INCLUDE <STDIO.H>
#INCLUDE <UNISTD.H>
#INCLUDE <FCNTL.H>
#INCLUDE <STDLIB.H>
#INC