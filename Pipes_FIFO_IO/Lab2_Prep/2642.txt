#INCLUDE <SYS/STAT.H>
#INCLUDE <STDIO.H>
#INCLUDE <UNISTD.H>
#INCLUDE <FCNTL.H>
#INCLUDE <STDLIB.H>
#INCLUDE "PACKET.H"
#INCLUDE <SIGNAL.H>


VOID USAGE (CHAR* INFO)
{
	PRINTF("%S USAGE:\N",INFO);
	PRINTF("%S FIFO FILE \N",INFO);
}

VOID RUN_READ(INT FIFO, INT FD)
{
	INT N;
	
	PACKET BUFFER;
	BUFFER.HEADER.PID = GETPID();
	
	DO
	{
		N = READ(FD,BUFFER.MSG,PIPE_BUF);
		IF ( N < 0)
		{
			PERROR("READ()");
			EXIT(EXIT_FAILURE);
		}
		IF(N < MSG_SIZE)
			MEMSET(BUFFER.MSG+N,0,MSG_SIZE-N);
		IF(N > 0)
		{
			IF(WRITE(FIFO, (VOID*)&BUFFER, SIZEOF(BUFFER) ) < 0 )
			{
				PERROR("WRITE()");
				EXIT(EXIT_FAILURE);
			}
		}
			
	}WHILE ( N == PIPE_BUF );
}

INT MAIN(INT ARGC, CHAR* ARGV[])
{
	IF(ARGC !=3)
	{
		USAGE(ARGV[0]);
		RETURN 0;
	}
	
	CONST CHAR* MY_FIFO = ARGV[1];
	CONST CHAR* MY_FILE = ARGV[2];
	INT FIFO,FD;
	
	/*
	PRINTF("UNLINKING THE FIFO...\N");
	(VOID)UNLINK(MY_FIFO);
	
	PRINTF("MKFIFO...\N");
	IF( MKFIFO(MY_FIFO, 0666))
		RETURN 1;
	*/
	PRINTF("OPENING FIFO FILE \N");
	IF ( (FIFO = OPEN(MY_FIFO, O_WRONLY) ) < 0)
	{
		FPRINTF(STDERR,"ERROR WITH OPENING FIFO\N");
		RETURN 1;
	}
	
	PRINTF("OPENING OUTPUT FILE \N");
	IF ( (FD = OPEN(MY_FILE, O_RDONLY) ) < 0)
	{
		FPRINTF(STDERR,"ERROR WITH OPENING FILE\N");
		RETURN 1;
	}
	PRINTF("FIFO OPENED\N");
	RUN_READ(FIFO, FD);
	
	
	CLOSE(FD);
	RETURN 0;
	
	RETURN 0;
}
